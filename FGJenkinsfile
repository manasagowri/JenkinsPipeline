suite_defs = [
   'sanity_ceph_ansible' : ['suite_path' : 'suites/nautilus/ansible/sanity_ceph_ansible.yaml', 'conf_path' : 'conf/nautilus/ansible/sanity-ceph-ansible.yaml'],
   'sanity_ceph_ansible_small' : ['suite_path' : 'suites/nautilus/ansible/sanity_ceph_ansible_small.yaml', 'conf_path' : 'conf/nautilus/ansible/sanity-ceph-ansible-small.yaml'],
   'sanity_containerized_ceph_ansible' : ['suite_path' : 'suites/nautilus/ansible/sanity_containerized_ceph_ansible.yaml', 'conf_path' : 'conf/nautilus/ansible/sanity-ceph-ansible.yaml'],
   'switch_rpm_to_container' : ['suite_path' : 'suites/nautilus/ansible/switch_rpm_to_container.yaml', 'conf_path' : 'conf/nautilus/ansible/sanity-ceph-ansible.yaml']
]

properties([
    parameters([
        string(defaultValue: '', description: 'Enter the rhbuild name. For ex: 4.2-rhel-8', name: 'rhbuild', trim: true),
        string(defaultValue: '', description: 'Enter the inventory file with path. For ex: rhel-8.2-server-x86_64. If left empty, the build will be triggered for latest versions of both RHEL-7 and RHEL-8', name: 'inventory', trim: true),
        string(defaultValue: '', description: 'Enter the repo details, if the build needs be triggered for any specific RHCS version.', name: 'rhs_ceph_repo', trim: true),
        string(defaultValue: '', description: 'Enter the container image URL if applicable. ', name: 'container_image', trim: true),
        string(defaultValue: 'red-hat-storage/cephci', description: 'Enter the github repo link for the build. Default will be red-hat-storage/cephci.', name: 'github_repo_link', trim: true),
        string(defaultValue: 'master', description: 'Enter the git branch to be used for the build. Default will be master.', name: 'git_branch', trim: true),
        string(defaultValue: '', description: 'Enter the conf file with path for the build. For ex: install_prereq_fullconfig', name: 'global_conf', trim: true),
        extendedChoice(bindings: '', defaultValue: 'a', description: '', descriptionPropertyValue: '', groovyClasspath: '', groovyScript: '''
           suite_defs = [
   'sanity_ceph_ansible' : ['suite_path' : 'suites/nautilus/ansible/sanity_ceph_ansible.yaml', 'conf_path' : 'conf/nautilus/ansible/sanity-ceph-ansible.yaml'],
   'sanity_ceph_ansible_small' : ['suite_path' : 'suites/nautilus/ansible/sanity_ceph_ansible_small.yaml', 'conf_path' : 'conf/nautilus/ansible/sanity-ceph-ansible-small.yaml'],
   'sanity_containerized_ceph_ansible' : ['suite_path' : 'suites/nautilus/ansible/sanity_containerized_ceph_ansible.yaml', 'conf_path' : 'conf/nautilus/ansible/sanity-ceph-ansible.yaml'],
   'switch_rpm_to_container' : ['suite_path' : 'suites/nautilus/ansible/switch_rpm_to_container.yaml', 'conf_path' : 'conf/nautilus/ansible/sanity-ceph-ansible.yaml']
           ]
           def pars = suite_defs.keySet()
           List<String> artifacts = new ArrayList<String>()
           for(item in pars){
              artifacts.add(item)
           }
        return artifacts''', multiSelectDelimiter: ',', name: 'suite_name', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_CHECKBOX', visibleItemCount: 3)
   ])
])

//save corresponding confs and suites as a global variable. While looping through the selected suites, select the corresponding conf name as well

args = ['rhbuild' : "${params.rhbuild}", 'inventory' : "conf/inventory/${params.inventory}.yaml", 'rhs_ceph_repo' : "${params.rhs_ceph_repo}" , 'container_image' : "${params.container_image}" ,
        'github_repo_link' : "${params.github_repo_link}" , 'git_branch' : "${params.git_branch}" , 'suite_name' : "" , 'global_conf' : ""]

import groovy.io.FileType
node{
    stage('Execute groovy script'){
        def myvar = suite_defs.keySet()
        echo myvar.toString()
        script{
            echo "Inside script"
            //exeuteCLI(args)
            def suites = params.suite_name.split(',')
            echo suites.getClass()
            for(suite in suites){
               echo "in for loop"
               echo suite
               echo suite_defs.get(suite)
            }
            library identifier: 'JenkinsPipeline@main', retriever: modernSCM([$class: 'GitSCMSource', credentialsId: '', remote: 'https://github.com/manasagowri/JenkinsPipeline', traits: [gitBranchDiscovery()]])
            ExecuteCephCI(args)
            echo "Scripts done"
        }
    }
}

def exeuteCLI(args){
   echo "Inside execute CLI"
   checkout([$class: 'GitSCM', branches: [[name: args['git_branch']]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/' + args['github_repo_link']]]])
   echo "Check out complete"
   def cli = 'python3 -m venv .;source ./bin/activate;pip install -r requirements.txt;ls -lt ;  python run.py --rhbuild ' + args['rhbuild'] + ' --global-conf ' + args['global_conf'] + ' --osp-cred ~/osp-cred-ci-2.yaml --inventory '
              + args['inventory'] + ' --suite ' + args['suite_name'] + ' --log-level info --ignore-latest-container --insecure-registry '
   echo "CLI defined"
   echo cli
   if(args['rhs-ceph-repo']?.trim()){
        cli = cli + '--rhs-ceph-repo ' + args['rhs_ceph_repo']
   }
   echo "CLI modified"
   echo cli
   sh cli
}
